---
# tasks file for roles/cinder_controller
- name: get management_interface's ip 
  ansible.builtin.shell: |
    ip -4 -br addr show | grep -v "lo" | awk '{print $3}' | cut -d'/' -f1 | head -n1
  register: management_ip

- name: install cinder packages
  ansible.builtin.dnf:
    name: "{{ cinder_packages }}"
    state: latest

- name: create cinder_db
  block:
    - name: create cinder_db
      community.mysql.mysql_db:
        name: "{{ cinder_db_conf.cinder_db_name }}"
        state: present
        login_host: "{{ management_ip.stdout }}"
        login_user: root
        login_password: "{{ cinder_conf.mysql_root_password }}"

    - name: grant all pri to cinder_db user@localhost
      community.mysql.mysql_user:
        name: "{{ cinder_db_conf.cinder_db_user }}"
        password: "{{ cinder_db_conf.cinder_db_user_password }}"
        login_host: "{{ management_ip.stdout }}"
        priv: "{{ cinder_db_conf.cinder_db_name }}.*:ALL"
        host: localhost
        state: present
        login_user: root
        login_password: "{{ cinder_conf.mysql_root_password }}"

    - name: grant all pri to cinder_db user@%
      community.mysql.mysql_user:
        name: "{{ cinder_db_conf.cinder_db_user }}"
        password: "{{ cinder_db_conf.cinder_db_user_password }}"
        login_host: "{{ management_ip.stdout }}"
        priv: "{{ cinder_db_conf.cinder_db_name }}.*:ALL"
        host: "%"
        state: present
        login_user: root
        login_password: "{{ cinder_conf.mysql_root_password }}"

- name: create cinder openstack service and assign admin role to cinder user
  block: 
    - name: create cinder openstack user
      openstack.cloud.identity_user:
        name: cinder
        domain: default
        password: "{{ cinder_conf.cinder_openstack_service_password }}"

    - name: assign admin role to cinder user in service project
      openstack.cloud.role_assignment:
        user: cinder
        project: service
        role: admin 
        state: present

    - name: create block storage service
      openstack.cloud.catalog_service:
        name: cinderv3
        service_type: volumev3
        description: "OpenStack Volume Service" 
        state: present

- name: create cinder's api endpoint
  block: 
    - name: create cinder's public endpoint
      openstack.cloud.endpoint:
        service: cinderv3
        endpoint_interface: public
        url: "http://{{ management_ip.stdout }}:8776{{ cinder_conf.cinder_api_endpoint_path }}"
        region: RegionOne
        state: present

    - name: create cinder's internal endpoint
      openstack.cloud.endpoint:
        service: cinderv3
        endpoint_interface: internal
        url: "http://{{ management_ip.stdout }}:8776{{ cinder_conf.cinder_api_endpoint_path }}"
        region: RegionOne
        state: present

    - name: create cinder's admin endpoint
      openstack.cloud.endpoint:
        service: cinderv3
        endpoint_interface: admin
        url: "http://{{ management_ip.stdout }}:8776{{ cinder_conf.cinder_api_endpoint_path }}"
        region: RegionOne
        state: present

- name: deploy /etc/cinder/cinder.conf from templates
  ansible.builtin.template:
    src: templates/cinder.conf.j2
    dest: "{{ cinder_conf.cinder_conf_path }}"

- name: add my_ip in /etc/cinder/cinder.conf
  #my_ip here uses management_intf 
  community.general.ini_file:
    path: "{{ cinder_conf.cinder_conf_path }}"
    section: DEFAULT
    option: my_ip
    value: "{{ management_ip.stdout }}"

- name: fill the cinder database
  ansible.builtin.shell: |
    su -s /bin/sh -c "cinder-manage db sync" cinder

- name: start and enable cinder services
  ansible.builtin.service:
    state: started
    name: "{{ item }}"
    enabled: yes
  loop:
    - openstack-cinder-api.service
    - openstack-cinder-scheduler.service
    - openstack-cinder-volume.service

